#!/usr/local/bin/python

# Name: clearPublicRadarLog
# Purpose: to clear up a full transaction log and hung processes in the
#	PUB_MGI..radar database
# Notes: must be run as user mgiadmin

import os
import sys
sys.path.insert (0, '/usr/local/mgi/live/lib/python')
if os.environ.has_key('MGICONFIG'):
	sys.path.insert (0, os.environ['MGICONFIG'])

import time
import db
import runCommand

###--- Globals ---###

USAGE = '''Usage: %s
	Clears a full transaction log and hung processes in the PUB_MGI..radar
	database.  Must be run as user mgiadmin.
''' % sys.argv[0]

START_TIME = time.time()

###--- Functions ---###

def report (message):
	sys.stderr.write('%8.3f : %s\n' % (time.time() - START_TIME, message))
	return

def bailout (message, showUsage = False):
	if showUsage:
		sys.stderr.write (USAGE)
	sys.stderr.write ('Error: %s\n' % message)
	sys.exit(1)

def checkUser():
	(stdout, stderr, exitCode) = runCommand.runCommand ('whoami')

	if not stdout.strip().startswith('mgiadmin'):
		bailout ('%s must be run as mgiadmin' % sys.argv[0])
	return

def dbLogin():
	try:
		import masterConfig
		mgiDbUtils = masterConfig.MGI_DBUTILS
	except:
		mgiDbUtils = '/usr/local/mgi/live/dbutils/mgidbutilities/'

	try:
		fp = open (os.path.join (mgiDbUtils,
			'.mgd_dbo_public_password'),
			'r')
		lines = fp.readlines()
		fp.close()
	except:
		bailout ('Cannot read .mgd_dbo_public_password file')

	password = lines[0].strip()

	db.set_sqlLogin ('mgd_dbo', password, 'PUB_MGI', 'radar')
	report ('Logged into PUB_MGI..radar as mgd_dbo')
	return

def getSuspendedSpids():
	spids = []
	results = db.sql ('sp_who', 'auto')

	for row in results:
		cmd = row['cmd'].lower()
		dbname = row['dbname'].lower()
		loginame = row['loginame']
		spid = row['spid']

		if (loginame == 'mgd_public') and \
		    (dbname == 'radar') and \
		    (cmd.startswith('log suspend')):
			    spids.append (spid) 

	if spids:
		report ('Found %d SPIDs to terminate' % len(spids))
	else:
		report ('No SPIDs to terminate -- log is not full')
		sys.exit(0)

	return spids

def killProcesses (spids):
	for spid in spids:
		db.sql ('kill %s' % spid, 'auto')
	report ('Terminated %d SPIDs' % len(spids))
	return

def waitForRollback():
	time.sleep(1)	# give the rollback time to start

	while 1:
		hasRollback = False
		results = db.sql ('sp_who', 'auto')

		for row in results:
			cmd = row['cmd'].lower()
			if cmd.find('rollback') >= 0:
				hasRollback = True
				break
		if not hasRollback:
			report ('Rollback has finished')
			return
		time.sleep(5)
	return

def dumpLog():
	db.sql('dump tran radar with truncate_only', 'auto')
	report ('Dumped and cleared transaction log')
	return

def main():
	checkUser()
	dbLogin()
	killProcesses(getSuspendedSpids())
	waitForRollback()
	dumpLog()
	report ('Done')
	return

###--- Main ---###

if __name__ == '__main__':
	main()

