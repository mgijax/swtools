#!/usr/local/bin/python

# Name: logTop
# Purpose: to collect data on CPU and memory usage from 'top' on a Linux
#	system, then write it out in a tab-delimited format

import getopt
import time
import sys
import os
import re
import subprocess

USAGE = '''Usage: %s [-s <seconds>][-d <minutes>]
    Options:
	-s : number of seconds between checks (default is 3)
	-d : number of minutes to run the test (default is 60)
    Notes:
	1. Results are written to stdout as they are measured.
	2. Value for -s must be between 1 and 600 (ten minutes).
	3. Value for -d must be between 1 and 3600 (one day).
''' % sys.argv[0]

OSTYPE = None
DELAY = 3
DURATION = 60
TESTER = None
TIME_WINDOW = 0.2	# window of time to allow for process management

def bailout (message, showUsage = False):
	if showUsage:
		sys.stderr.write (USAGE)
	sys.stderr.write('Error: ' + message + '\n')
	sys.exit(1)

def invoke (cmd, args):
	proc = subprocess.Popen ( [cmd] + args, stdout = subprocess.PIPE,
		stderr = subprocess.PIPE)
	return proc

def determineOSType():
	global OSTYPE, TESTER

	if os.environ.has_key('OSTYPE'):
		OSTYPE = os.environ['OSTYPE'].split()[0]
	else:
		proc = invoke ('uname', [ '-r','-s'])

		exitCode = proc.returncode
		stdout = proc.stdout.readlines()
		stderr = proc.stderr.readlines()

		proc.wait()

		if exitCode:
			bailout ('Failed to run uname: %s' % str(stderr))

		line = stdout[0].strip()

		if line.startswith('SunOS'):
			if line.endswith ('5.8'):
				OSTYPE = 'Solaris 8'
			elif line.endswith ('5.10'):
				OSTYPE = 'Solaris 10'
			else:
				bailout ('Cannot run on %s' % line)
		elif line.startswith('Linux'):
			OSTYPE = 'Linux'
		else:
			bailout ('Cannot run on %s' % line)

	OSTYPE = OSTYPE.lower()

	if OSTYPE == 'linux':
		TESTER = LinuxTest()
	elif OSTYPE == 'solaris 8':
		TESTER = Solaris8Test()
	elif OSTYPE == 'solaris 10':
		TESTER = Solaris10Test()
	else:
		bailout ('Unknown OSTYPE: %s' % OSTYPE)
	return

def processCommandLine():
	global DELAY, DURATION

	try:
		options, args = getopt.getopt (sys.argv[1:], 's:d:')
	except:
		bailout ('Invalid command-line', True)

	if len(args):
		bailout ('Too many command-line arguments', True)

	for (option, value) in options:
		if option == '-s':
			try:
				DELAY = int(value)
			except:
				bailout ('Value for -s must be an integer')

			if not (1 <= DELAY <= 600):
				bailout ('Invalid value for -s')
			
		elif option == '-d':
			try:
				DURATION = int(value)
			except:
				bailout ('Value for -d must be an integer')

			if not (1 <= DURATION <= 3600):
				bailout ('Invalid value for -d')
	return

pctRE = re.compile ('([0-9]+\.[0-9])%')
def percent (s):
	global pctRE

	match = pctRE.search(s)
	if match:
		return match.group(1)
	return ''

memRE = re.compile ('([0-9]+)([a-z])')
def asMb (s):
	global memRE

	s = s.lower()
	match = memRE.search(s)
	if match:
		num = int(match.group(1))
		suffix = match.group(2)

		if suffix == 'k':
			num = num * 1000
		elif suffix == 'm':
			num = num * 1000000
		elif suffix == 'g':
			num = num * 1000000000

		return '%0.1f' % (num / 1000000.0)

	return ''

class Test:
	def __init__ (self):
		self.topCommand = 'top'
		self.topArguments = []
		self.headings = []
		return

	def getHeadings (self):
		return self.headings

	def getCommand (self):
		return self.topCommand

	def getArgs (self):
		return self.topArguments

	def parseResults (self, lines):
		return 

	def printHeadings (self):
		print '\t'.join (['start time'] + self.headings)
		return

	def printResults (self, startTime, lines):
		columns = self.parseResults(lines)
		columns.insert (0,
			time.strftime('%Y-%m-%d %H:%M:%S',
				time.localtime(startTime)))
		print '\t'.join (columns)
		return

class LinuxTest (Test):
	def __init__ (self):
		Test.__init__ (self)
		self.topCommand = '/usr/bin/top'
		self.topArguments = [ '-n', '2', '-b' ]
		self.headings = [
			'cpu idle %', 'cpu user %',
			'cpu system %', 'cpu io wait %',
			'RAM total (Mb)', 'RAM used (Mb)', 'RAM free (Mb)',
			'RAM buffers (Mb)',
			'swap total (Mb)', 'swap used (Mb)', 'swap free (Mb)',
			'1-min load avg', '5-min load avg', '15-min load avg',
			'running tasks', 'sleeping tasks',
			]
		return

	def parseResults (self, lines):
		cpu = None
		mem = None
		swap = None
		load = None
		tasks = None

		for line in lines:
			if line.startswith('Cpu(s):'):
				cpu = line.split()
			elif line.startswith('Mem:'):
				mem = line.split()
			elif line.startswith('Swap:'):
				swap = line.split()
			elif line.startswith('Tasks:'):
				tasks = line.split()
			elif line.startswith('top - '):
				load = line.replace(',', '').split()

		columns = []

		if cpu:
			columns.append (percent (cpu[4]))
			columns.append (percent (cpu[1]))
			columns.append (percent (cpu[2]))
			columns.append (percent (cpu[5]))
		else:
			columns = columns + [''] * 4

		if mem:
			columns.append (asMb (mem[1]))
			columns.append (asMb (mem[3]))
			columns.append (asMb (mem[5]))
			columns.append (asMb (mem[7]))
		else:
			columns = columns + [''] * 3

		if swap:
			columns.append (asMb (swap[1]))
			columns.append (asMb (swap[3]))
			columns.append (asMb (swap[5]))
		else:
			columns = columns + [''] * 3

		if load:
			columns.append (load[-3])
			columns.append (load[-2])
			columns.append (load[-1])
		else:
			columns = columns + [''] * 3


		if tasks:
			columns.append (tasks[3])
			columns.append (tasks[5])
		else:
			columns = columns + [''] * 2

		return columns

class Solaris10Test (Test):
	def __init__ (self):
		Test.__init__ (self)
		self.topCommand = '/opt/sfw/bin/top'
		self.topArguments = [ '-d', '2' ]
		self.headings = [
			'cpu idle %', 'cpu user %',
			'cpu kernel %', 'cpu io wait %', 'cpu swap %',
			'RAM total (Mb)', 'RAM free (Mb)',
			'swap used (Mb)', 'swap free (Mb)',
			'1-min load avg', '5-min load avg', '15-min load avg',
			'all processes', 'sleeping processes',
			'zombie processes', 'running processes'
			]
		return

	def parseResults (self, lines):
		cpu = None
		mem = None
		load = None
		tasks = None

		for line in lines:
			if line.startswith('CPU states:'):
				cpu = line.split()
			elif line.startswith('Memory:'):
				mem = line.split()
			elif line.find(' processes:') >= 0:
				tasks = line.replace(':','').replace(',','').split()
			elif line.startswith('load averages:'):
				load = line.replace(',', '').split()

		columns = []

		if cpu:
			columns.append (percent (cpu[2]))
			columns.append (percent (cpu[4]))
			columns.append (percent (cpu[6]))
			columns.append (percent (cpu[8]))
			columns.append (percent (cpu[10]))
		else:
			columns = columns + [''] * 5

		if mem:
			columns.append (asMb (mem[1]))
			columns.append (asMb (mem[3]))
			columns.append (asMb (mem[5]))
			columns.append (asMb (mem[7]))
		else:
			columns = columns + [''] * 4

		if load:
			columns.append (load[2])
			columns.append (load[3])
			columns.append (load[4])
		else:
			columns = columns + [''] * 3


		if tasks:
			columns.append (tasks[0])

			for tag in [ 'sleeping', 'zombie', 'on' ]:
				if tag in tasks:
					columns.append(tasks[tasks.index(tag) - 1])
				else:
					columns.append('0')
		else:
			columns = columns + [''] * 4

		return columns

Solaris8Test = Solaris10Test		# alias for now, until diverges

def handleFinishedProcesses (processes):
	# to have ordered output, processes must be done from leftmost to
	# rightmost (earliest to latest) in 'processes'.  if a later one
	# ends before an earlier one, just ignore it until the earlier ones
	# are done.

	# if no processes, nothing to do here, just return empty list
	if not processes:
		return processes

	# work on the first process, then recurse for any others

	(startTime, proc) = processes[0]

	# if poll() returns None, then the process isn't finished
	if proc.poll() == None:
		return processes

	exitCode = proc.returncode
	stdout = proc.stdout.readlines()
	stderr = proc.stderr.readlines()

	proc.wait()

	if exitCode:
		bailout ('Subprocess failed: %s' % str(stderr))

	TESTER.printResults (startTime, stdout)

	# recurse over any other processes
	return handleFinishedProcesses (processes[1:])

def main():
	determineOSType()
	processCommandLine()

	TESTER.printHeadings()

	top = TESTER.getCommand()
	args = TESTER.getArgs()

	now = time.time()
	nextTime = now + DELAY
	endTime = now + DURATION * 60.0

	processes = [ (now, invoke(top, args)) ]

	while (now < endTime) or (len(processes) > 0):
		now = time.time()

		# if we're past the end time, we're waiting for procs to end
		if (now > endTime):
			processes = handleFinishedProcesses(processes)
			time.sleep (0.5)
		else:
			# otherwise, there's more work to do

			# if we have spare time, handle any ended procs
			if (nextTime - now) >= TIME_WINDOW:
				processes = handleFinishedProcesses(processes)

			# if we're close to the next process starting, just
			# sit and wait to start it

			now = time.time()

			if (nextTime - now) <= TIME_WINDOW:
				if nextTime - now > 0.0:
					time.sleep(nextTime - now)
				proc = invoke (top, args)
				processes.append ( (nextTime, proc) )

				nextTime = nextTime + DELAY
			else:
				# next process isn't close to starting, so
				# just wait a while and check again

				time.sleep (TIME_WINDOW)

		now = time.time()
	return

if __name__ == '__main__':
	main()
