#!/usr/local/bin/python

# Expects to have output from 'cvs log' piped into it.  Extracts the log
# entries from the 'cvs log' output, orders them by date, and writes them out
# from oldest to newest.  (in case of a shared data, orders by version number)

import sys
import re

dateRE = re.compile('([0-9]{4})/([0-9]{2})/([0-9]{2})')
versionRE = re.compile('([0-9\.]+)')

def readData():
	lines = sys.stdin.readlines()

	beforeEntry = 0
	inEntry = 1

	status = beforeEntry
	entries = []
	entry = []

	for line in lines:
		line = line.rstrip()
		if status == beforeEntry:
			if line.startswith('-----'):
				status = inEntry
				entry = [line]
		elif status == inEntry:
			if line.startswith('-----'):
				if entry:
					entries.append('\n'.join(entry))
					entry = [line]
			elif line.startswith('======'):
				if entry:
					entries.append('\n'.join(entry))
					entry = [line]
			else:
				entry.append(line)
	if entry:
		entries.append('\n'.join(entry))
	return entries

def printEntries(data):
	for entry in data:
		print entry
	return

def extractVersion(a):
	# extract the version number and convert to a list of integers, so it
	# can be sorted

	vMatch = versionRE.search(a)
	if vMatch:
		vList = []
		versionSplit = vMatch.group(0).split('.')
		for i in versionSplit:
			vList.append(int(i))
		return vList
	return []

def compareEntries(a, b):
	# standard Python-style comparison routine, for use in sorting a list
	# of elements using pairwise comparison.  This is notably inefficient
	# as we keep re-extracting the date (and version) from each entry on
	# each comparison, but as the data set is assumed to be very small,
	# optimizing it by caching these probably wouldn't produce a noticeable
	# improvement.

	aDate = dateRE.search(a)
	bDate = dateRE.search(b)

	if aDate:
		if not bDate:
			# a has a date, b doesn't.  prioritize a.
			return -1

		# compose sortable yyyymmdd strings, then sort based on them

		aSortable = aDate.group(1) + aDate.group(2) + aDate.group(3)
		bSortable = bDate.group(1) + bDate.group(2) + bDate.group(3)
		x = cmp(aSortable, bSortable)

		if x != 0:
			return x

		# dates match, compare versions

		aVersion = extractVersion(a)
		bVersion = extractVersion(b)

		if aVersion:
			if not bVersion:
				# a has version, b doesn't.  perfer a.
				return -1

			# both have versions, compare them
			return cmp(aVersion, bVersion)

		elif bVersion:
			# b has version, a doesn't.  prefer b.
			return 1

	elif bDate:
		# b has a date, a doesn't.  prioritize b.
		return 1

	# can't tell a difference, fall back on comparing whole entry (should
	# not happen)
	return cmp(a, b)

if __name__ == '__main__':
	data = readData()
	data.sort(compareEntries)
	printEntries(data)
